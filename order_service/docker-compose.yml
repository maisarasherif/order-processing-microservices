version: '3.8'

services:
  postgres_orders:
    image: postgres:16-alpine
    container_name: order_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: orderuser
      POSTGRES_PASSWORD: orderpass
      POSTGRES_DB: order_db
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "5433:5432" 
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d order_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - order_network

  order_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order_service
    restart: unless-stopped
    ports:
      - "8081:8081"
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: order-service
        fluentd-async: "true"
    environment:
      DB_HOST: postgres_orders
      DB_PORT: 5432
      DB_USER: orderuser
      DB_PASSWORD: orderpass
      DB_NAME: order_db
      DB_SSLMODE: disable
      SERVICE_PORT: 8081
      LOG_LEVEL: info
      PAYMENT_SERVICE_URL: http://payment_service:8082
      NOTIFICATION_SERVICE_URL: http://notification_service:8083
    depends_on:
      postgres_orders:
        condition: service_healthy
    networks:
      - order_network
      - microservices-network  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order_svc.rule=PathPrefix(`/api/v1/order_svc`)"
      - "traefik.http.routers.order_svc.entrypoints=web,websecure"
      - "traefik.http.routers.order_svc.priority=100"
      - "traefik.http.services.order_svc.loadbalancer.server.port=8081"
      - "traefik.http.middlewares.order_stripprefix.stripprefix.prefixes=/api/v1/order_svc"
      - "traefik.http.routers.order_svc.middlewares=order_stripprefix"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

volumes:
  postgres_order_data:
    driver: local

networks:
  order_network:
    driver: bridge
  microservices-network:
    external: true  